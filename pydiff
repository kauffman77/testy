#!/usr/bin/env python3

# from: https://docs.python.org/3/library/difflib.html#difflib.Differ

""" Command line interface to difflib.py providing diffs in four formats:

* ndiff:    lists every line and highlights interline changes.
* context:  highlights clusters of changes in a before/after format.
* unified:  highlights clusters of changes in an inline format.
* html:     generates side by side comparison with change highlights.

"""

import sys, os, difflib, argparse
from difflib import SequenceMatcher
from datetime import datetime, timezone
import re

def sdiff4(alines,blines,ignore_whitespace=False,ignore_blanklines=False,equal_dots=False):
    if type(alines) is str:
        alines = alines.splitlines()
    if type(blines) is str:
        blines = blines.splitlines()

    awidth = max(len(a) for a in alines)
    bwidth = max(len(a) for a in alines)

    alines_match = alines
    blines_match = blines

    if ignore_whitespace:
        alines_match = [re.subn(r"\s+"," ",x)[0] for x in alines]
        blines_match = [re.subn(r"\s+"," ",x)[0] for x in blines]
        # for x in alines_match:
        #     print(f"a {isjunk(x)}: {x}")
        # for x in blines_match:
        #     print(f"b {isjunk(x)}: {x}")

    aidx = list(range(len(alines)+1))
    bidx = list(range(len(blines)+1))
    if ignore_blanklines:
        alines_match = []
        aidx = []
        for (i,x) in enumerate(alines):
            if not re.fullmatch(r"^\s*$",x):
                alines_match.append(x)
                aidx.append(i)
        blines_match = []
        bidx = []
        for (i,x) in enumerate(blines):
            if not re.fullmatch(r"^\s*$",x):
                blines_match.append(x)
                bidx.append(i)
        aidx.append(len(alines))
        bidx.append(len(blines))
            
    cruncher = SequenceMatcher(None, alines_match, blines_match)

    sym_equal = " " if not equal_dots else "."
    sym_delete = "<"
    sym_insert = ">"
    sym_replace = "|"

    difflines = []
    diffcount = {}
    for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
        # print(f"{tag} {alo} {ahi} {blo} {bhi}")
        alo = aidx[alo]
        ahi = aidx[ahi]
        blo = bidx[blo]
        bhi = bidx[bhi]
        if tag == 'equal':
            sym = sym_equal
            for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {blines[j]:{bwidth}}")
        elif tag == 'delete':
            sym = sym_delete
            for i in range(alo,ahi):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {'':{bwidth}}")
        elif tag == 'insert':
            sym = sym_insert
            for i in range(blo,bhi):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
        elif tag == 'replace':
            arepl = ahi-alo
            brepl = bhi-blo
            nrepl = min(arepl,brepl)
            sym = sym_replace
            # print (alo,ahi,blo,bhi,"nrepl:",nrepl)
            for i in range(nrepl):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[alo+i]:{awidth}} {sym} {blines[blo+i]:{bwidth}}")
            if arepl < brepl:
                tag = 'insert'
                for i in range(blo+nrepl,bhi):
                    diffcount[tag] = diffcount.get(tag,0)+1
                    difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
            else:
                tag = 'delete'
                for i in range(alo+nrepl,ahi):
                    diffcount[tag] = diffcount.get(tag,0)+1
                    difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
        else:
            raise ValueError('unknown tag %r' % (tag,))

    difflines.append("")
    return ("\n".join(difflines),diffcount)



def sdiff3(alines,blines,ignore_whitespace=False,equal_dots=False):
    if type(alines) is str:
        alines = alines.splitlines()
    if type(blines) is str:
        blines = blines.splitlines()

    awidth = max(len(a) for a in alines)
    bwidth = max(len(a) for a in alines)

    alines_match = alines
    blines_match = blines

    if ignore_whitespace:
        alines_match = [re.subn(r"\s+"," ",x)[0] for x in alines]
        blines_match = [re.subn(r"\s+"," ",x)[0] for x in blines]
        # for x in alines_match:
        #     print(f"a {isjunk(x)}: {x}")
        # for x in blines_match:
        #     print(f"b {isjunk(x)}: {x}")

    cruncher = SequenceMatcher(None, alines_match, blines_match)

    sym_equal = " " if not equal_dots else "."
    sym_delete = "<"
    sym_insert = ">"
    sym_replace = "|"

    difflines = []
    diffcount = {}
    for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
        # print(f"{tag} {alo} {ahi} {blo} {bhi}")
        if tag == 'equal':
            sym = sym_equal
            for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {blines[j]:{bwidth}}")
        elif tag == 'delete':
            sym = sym_delete
            for i in range(alo,ahi):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {'':{bwidth}}")
        elif tag == 'insert':
            sym = sym_insert
            for i in range(blo,bhi):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
        elif tag == 'replace':
            arepl = ahi-alo
            brepl = bhi-blo
            nrepl = min(arepl,brepl)
            sym = sym_replace
            # print (alo,ahi,blo,bhi,"nrepl:",nrepl)
            for i in range(nrepl):
                diffcount[tag] = diffcount.get(tag,0)+1
                difflines.append(f"{alines[alo+i]:{awidth}} {sym} {blines[blo+i]:{bwidth}}")
            if arepl < brepl:
                tag = 'insert'
                for i in range(blo+nrepl,bhi):
                    diffcount[tag] = diffcount.get(tag,0)+1
                    difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
            else:
                tag = 'delete'
                for i in range(alo+nrepl,ahi):
                    diffcount[tag] = diffcount.get(tag,0)+1
                    difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
        else:
            raise ValueError('unknown tag %r' % (tag,))

    difflines.append("")
    return ("\n".join(difflines),diffcount)




################################################################################
def sdiff2(alines,blines,ignore_whitespace=False):
    if type(alines) is str:
        alines = alines.splitlines()
    if type(blines) is str:
        blines = blines.splitlines()

    awidth = max(len(a) for a in alines)
    bwidth = max(len(a) for a in alines)

    alines_match = alines
    blines_match = blines
    isjunk = None

    if ignore_whitespace:
        alines_match = [re.subn(r"\s+"," ",x)[0] for x in alines]
        blines_match = [re.subn(r"\s+"," ",x)[0] for x in blines]
        isjunk = lambda x : re.fullmatch(r"^\s*$",x) is not None
        for x in alines_match:
            print(f"a {isjunk(x)}: {x}")
        for x in blines_match:
            print(f"b {isjunk(x)}: {x}")

    cruncher = SequenceMatcher(isjunk, alines_match, blines_match)

    difflines = []
    diffcount = {}
    for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
        print(f"{tag} {alo} {ahi} {blo} {bhi}")
        if tag == 'equal':
            for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
                sym = " "
                sym = "."
                if isjunk(alines[i]):
                    sym = "("
                if isjunk(blines[j]):
                    sym = ")"
                symcount[sym] = symcount.get(sym,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {blines[j]:{bwidth}}")
        elif tag == 'delete':
            for i in range(alo,ahi):
                sym = "<" if not isjunk(alines[i]) else "("
                symcount[sym] = symcount.get(sym,0)+1
                difflines.append(f"{alines[i]:{awidth}} {sym} {'':{bwidth}}")
        elif tag == 'insert':
            for i in range(blo,bhi):
                sym = ">" if not isjunk(blines[i]) else ")"
                symcount[sym] = symcount.get(sym,0)+1
                difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
        elif tag == 'replace':
            arepl = ahi-alo
            brepl = bhi-blo
            nrepl = min(arepl,brepl)
            print (alo,ahi,blo,bhi,"nrepl:",nrepl)
            for i in range(nrepl):
                sym = "|"
                if isjunk(alines[i]):
                    sym = "("
                if isjunk(blines[i]):
                    sym = ")"
                symcount[sym] = symcount.get(sym,0)+1
                difflines.append(f"{alines[alo+i]:{awidth}} {sym} {blines[blo+i]:{bwidth}}")
            if arepl < brepl:
                for i in range(blo+nrepl,bhi):
                    sym = ">" if not isjunk(blines[i]) else ")"
                    symcount[sym] = symcount.get(sym,0)+1
                    difflines.append(f"{'':{awidth}} {sym} {blines[i]:{bwidth}}")
            else:
                for i in range(alo+nrepl,ahi):
                    sym = "<" if not isjunk(alines[i]) else "("
                    symcount[sym] = symcount.get(sym,0)+1
                    difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
        else:
            raise ValueError('unknown tag %r' % (tag,))

    difflines.append("")
    return ("\n".join(difflines),symcount)


    # for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
    #     print(f"{tag} {alo} {ahi} {blo} {bhi}")
    #     if tag == 'equal':
    #         for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
    #             difflines.append(f"{alines[i]:{awidth}}   {blines[j]:{bwidth}}")
    #     elif tag == 'replace':
    #         for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
    #             difflines.append(f"{alines[i]:{awidth}} | {blines[j]:{bwidth}}")
    #     elif tag == 'delete':
    #         for i in range(alo,ahi):
    #             difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
    #     elif tag == 'insert':
    #         for i in range(blo,bhi):
    #             difflines.append(f"{'':{awidth}} > {blines[i]:{bwidth}}")
    #     else:
    #         raise ValueError('unknown tag %r' % (tag,))


################################################################################

def sdiff(alines,blines):
    if type(alines) is str:
        alines = alines.splitlines()
    if type(blines) is str:
        blines = blines.splitlines()

    awidth = max(len(a) for a in alines)
    bwidth = max(len(a) for a in alines)

    cruncher = SequenceMatcher(None, alines, blines)
    difflines = []

    for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
        print(f"{tag} {alo} {ahi} {blo} {bhi}")
        if tag == 'equal':
            for (i,j) in zip(range(alo,ahi),range(blo,bhi)):
                difflines.append(f"{alines[i]:{awidth}}   {blines[j]:{bwidth}}")
        elif tag == 'delete':
            for i in range(alo,ahi):
                difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
        elif tag == 'insert':
            for i in range(blo,bhi):
                difflines.append(f"{'':{awidth}} > {blines[i]:{bwidth}}")
        elif tag == 'replace':
            arepl = ahi-alo
            brepl = bhi-blo
            nrepl = min(arepl,brepl)
            print (alo,ahi,blo,bhi,"nrepl:",nrepl)
            for i in range(nrepl):
                difflines.append(f"{alines[alo+i]:{awidth}} | {blines[blo+i]:{bwidth}}")
            if arepl < brepl:
                for i in range(blo+nrepl,bhi):
                    difflines.append(f"{'':{awidth}} > {blines[i]:{bwidth}}")
            else:
                for i in range(alo+nrepl,ahi):
                    difflines.append(f"{alines[i]:{awidth}} < {'':{bwidth}}")
        else:
            raise ValueError('unknown tag %r' % (tag,))

    difflines.append("")
    return "\n".join(difflines)


def file_mtime(path):
    t = datetime.fromtimestamp(os.stat(path).st_mtime,
                               timezone.utc)
    return t.astimezone().isoformat()

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', action='store_true', default=False,
                        help='Produce a context format diff (default)')
    parser.add_argument('-u', action='store_true', default=False,
                        help='Produce a unified format diff')
    parser.add_argument('-s', action='store_true', default=False,
                        help='Produce a side-by-side format diff')
    parser.add_argument('-z', action='store_true', default=False,
                        help='Produce a side-by-side2 format diff')
    parser.add_argument('-m', action='store_true', default=False,
                        help='Produce HTML side by side diff '
                             '(can use -c and -l in conjunction)')
    parser.add_argument('-n', action='store_true', default=False,
                        help='Produce a ndiff format diff')
    parser.add_argument('-l', '--lines', type=int, default=3,
                        help='Set number of context lines (default 3)')
    parser.add_argument('fromfile')
    parser.add_argument('tofile')
    options = parser.parse_args()

    n = options.lines
    fromfile = options.fromfile
    tofile = options.tofile

    fromdate = file_mtime(fromfile)
    todate = file_mtime(tofile)
    with open(fromfile) as ff:
        fromlines = ff.readlines()
    with open(tofile) as tf:
        tolines = tf.readlines()

    symcount = None
    if options.u:
        diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)
    elif options.n:
        diff = difflib.ndiff(fromlines, tolines)
    elif options.s:
        diff = sdiff(open(fromfile).read(), open(tofile).read())
    elif options.z:
        (diff,diffcount) = sdiff4(open(fromfile).read(), open(tofile).read(),
                                  ignore_whitespace=True,equal_dots=True,
                                  ignore_blanklines=True)
    elif options.m:
        diff = difflib.HtmlDiff().make_file(fromlines,tolines,fromfile,tofile,context=options.c,numlines=n)
    else:
        print("Default to context diff")
        diff = difflib.context_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)

    sys.stdout.writelines(diff)
    if diffcount:
        for k,v in diffcount.items():
            print(f"{k:<8} : {v}")


if __name__ == '__main__':
    main()
