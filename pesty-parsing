#!/usr/bin/env python3

# preliminary testing on parsing org files for test contents

import re
import sys

class Segment:
  # these fields are obtained from parsing / initializing the segment
  title = None                  # lead comment or title
  comments = None               # comments accumulated in the session
  commands = []                 # shell commands to be run prior to running the session
  session = None                # session of input/output to be used, string
  program = None                # default program to run
  prompt  = None                # default prompt to use for input in session
  echoing = None                # style of echoing done by the program
  ses_input = None              # string of input extracted from session
  output_expect = None          # expected output extracted from session
  use_valgrind = None           # whether to run program under valgrind
  valgrind_reachable = None     # whether to count reachable memory as an error in valgrind
  valgrind_opts = None          # additional options to pass to valgrind such as suppression
  skip_return = None            # True if a non-zero exit code should be accepted (e.g. not trigger a failure)
  skip_diff = None              # True if diffing the expect/actual should be skipped
  timeout = None                # timeout to be used before segment is killed

  # these fields are set after the segment is run
  output_actual = None          # output program actually produces
  sbs_diff = None               # side-by-side diff
  retcode = None                # exit/return code of process that was run
  messages = []                 # set to any messages (failures) that are found
  passed = None                 # True for pass, False for fail, None for not run yet

class Test:
  # these fields are set during parsing / initialization
  title = None                  # title of the test
  points = None                 # number of points assigned, float possible
  segments = []                 # list of segments that comprise the 
  test_directory = None         # directory to use for this test or None if run in the working directory

  # these fields are set during/after the test evaluation
  passed = None                 # True for pass, False for fail, None for not run yet

  # these fields are set during formatting
  result = None                 # formatted result for test, usually a string but may be anythingthe formatter finds usesful

class Suite:
  # these fields are set during parsing / initialization
  title = None                  # title of the suite from the #+title: directive
  default_ses_opts = {}         # default options for sessions such as program / points / prompt
  tests = []                    # list of Tests encoded in the suite
  use_points = None             # True if points should be used
  points_possible = 0           # total possible points if points are in use
  points_scale = None           # Set to a float scaling factor points should be scaled (e.t. 0.5 to halve everything)
  test_list = None              # contains a list of numbers of tests to run; all tests by default
  show_all = None               # True means print all results on from all tests on the command line; defaults to true for single tests
  results_prefix = None         # file prefix for result output files
  results_dir = None            # base directory for test results files
  # raw_dir = None                # location of raw output files such as Valgrind logs
  test_result_files = None      # whether to produce individual test result files
  overall_result_file = None    # whether to produce an overall result file
  test_title_width = None       # max width of test titles for aligned printing

  # these fields are set during/after the suite evaluation
  passed_tests = 0              # total tests passed
  points_earned = 0             # total points earned among all tests
  



infile = sys.argv[1]
contents = ""
with open(infile) as f:
  contents = str(f.read())

# allow splits between lines starting with '*' and keep the separator
# lines as part of the split (they are test titles)
regex = re.compile(r"(^\* .*$)",re.MULTILINE)
parts = re.split(regex, contents)

preamble = parts[0]               # preceding the first test, stuff like #+title
titles   = parts[1:len(parts):2]  # titles of each test
contents = parts[2:len(parts):2]  # contents of each test
titles_contents = zip(parts[1:len(parts):2],parts[2:len(parts):2])

# import itertools                # for batching adjacent split lines like title/content
# titles_contents = itertools.batched(parts[1:],2)
# python provides a number of ways to do the above; involving
# itertools seems risky as it was added in python 3.12 (very late) and
# is not avialable on Grace

print("########################################")
print(f"PREMABLE:\n{preamble}\n")
# for i in range(len(titles)):
#   print("########################################")
#   print(f"TITLE: {titles[i]}\n")
#   print(f"CONTENTS:\n{contents[i]}\n")

for title,content in titles_contents:
  print("########################################")
  print(f"TITLE: {title}\n")
  print(f"CONTENT:\n{content}\n")

