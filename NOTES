* TODO Items
- [ ] TESTY_MULTI commands don't work unless there is a exactly one
  space separating the tokens. This defies common
  convention/expectation.  Work out a function to split words on
  spaces and use it in the MULTI functionality to make this more
  robust. 
- [ ] Re-arrange the example files into directories
  - Currently all under file:examples/ but could organize these a bit
    more with its own README
- [ ] Remove the need to pass 'cat' as the filter to various
  TESTY_MULTI commands
- [ ] Add signal handling to do cleanup if needed
- [ ] Adjust standard single tests to add failures to lists like they
  do in TESTY_MULT
- [ ] Explore use of Bash's built-in co-processes to see if that would
  simplify the overall design
- [ ] Remove use of 'mkfifo', perhaps FIFOs altogether as this feature
  does not work on Windows file systems under the WSL
- [ ] If a file doesn't end in a newline, this can cause the last line
  of a testing session to be missed. Try to make this a bit more
  robust. Use the DEBUG output to see when the last line of the
  session is missed

* Bad File Descriptors
When programs in a TESTY_MULTI session segfault, sometimes get bad
file descriptors during reads in testy itself which leads to errors
printing. Not sure how this could be happening so will need to do some
sleuthing.

#+BEGIN_SRC sh
val (master) [solution-p2-4061]% pwd
/home/kauffman/4061-S2021/projects/p2-blather/solution-p2-4061

val (master) [solution-p2-4061]% make test
./testy test_blather.org
============================================================
== test_blather.org : Blather Application Tests
== Running 20 / 20 tests
1)  Server Start/End                : FAIL -> results in file 'test-results/blather-01-result.tmp'
2)  Single Client Join / Depart     : FAIL -> results in file 'test-results/blather-02-result.tmp'
3)  Single Client Join + Shutdown   : FAIL -> results in file 'test-results/blather-03-result.tmp'
./testy: line 713: read: read error: 0: Bad file descriptor
4)  Single Client Messages          : FAIL -> results in file 'test-results/blather-04-result.tmp'
..
#+END_SRC

* DONE Avoiding Subshell Error messages During TESTY_MULTI
During TESTY_MULTI if a child processes segfault bash will report
the error and it is devilishly hard to subdue this reporting. It
looks like
#+BEGIN_SRC sh
> ./testy test_blather.org 1
============================================================
== testy test_blather.org
== Running 1 / 20 tests
./testy: line 224: 1372111 Segmentation fault      ( { for tofd in "${program_input__fifo_fd[@]}";
do
    if [[ "$tofd" != "CLOSED" ]]; then
        exec {tofd}>&-;
    fi;
done; eval exec $cmd; } )
1)  Server Start/End                : FAIL -> results in file 'test-results/blather-01-result.tmp'
============================================================
RESULTS: 0 / 1 tests passed
...
#+END_SRC

- Exploring options to solve this by examining the source code for bash
  downloaded here: file:/home/kauffman/Downloads/bash-src/
- Notable is the ~notify_of_job_status()~ function which prints the
  error message according criteria here:
  file:/home/kauffman/Downloads/bash-src/jobs.c::4320
  1. Not interactive; have tried starting testy with ~bash -i~ but
     this leads to other problems
  2. Signal that killed the program is trapped by testy; this works
     out alright, don't generally expect that testy will generate
     these errors but need to check whether
     - trap a signal that needs to be sent to the program
     - signaled program should die on this
     - can't kill testy with signaling
Using the trap solution for now as after testing this with blather and
commando, it does not seem to have any major problems and does indeed
suppress the error messages I wanted silenced.

May need to revisit this as the child processes inherit the traps and
if they are bash processes, may change their behavior.

* Multi Process testing

#+BEGIN_SRC text
> START server ./bl_server gotham
> SHELL kill -15 ${program_pid[server]}
> OUTPUT server
#+END_SRC

#+TESTY: program="TESTY_MULTI"

#+BEGIN_SRC text
> START server ./bl_server gotham
> START bruce ./bl_client gotham bruce
> START clark ./bl_client gotham clark
> INPUT bruce hey
> INPUT clark yo, what's up?
> INPUT bruce not much
> INPUT clark gotta go
> INPUT bruce me too
> INPUT bruce %EOF
> INPUT clark %EOF
> SIGNAL server -15 ${program_pid[server]}
> OUTPUT server
# server output goes here
> OUTPUT bruce
# bruce's output goes here
> OUTPUT clark
# clark's output goes here

# Not sure on this section what to do
> VALGRIND_CHECK server
> VALGRIND_CHECK bruce
> VALGRIND_CHECK clark
#+END_SRC

#+BEGIN_SRC sh
SHELL kill -15 %PNAME[server]

#+END_SRC
** notes 
- the example above illustrates that this command set as it would
  exist in testy looks more like another interpreter of some type
- as I have started to experiment with coding it in bash, it feels
  more like a subprogram
- particularly the declarations about output would be nice for testy
  to have inline and then just check the output lines as if it was an
  interpreter
- this would create a dependency on another file thought which is a
  little undesirable

Tue 18 Aug 2020 09:50:13 AM CDT 
- Altered the syntax away from the above somewhat but the general
  scheme is still what I ended up using
- see the banter/ directory for an example 
